version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: talentai_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-talentai}
      POSTGRES_USER: ${POSTGRES_USER:-talentai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-talentai_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_database.py:/docker-entrypoint-initdb.d/init_database.py
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - talentai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-talentai_user} -d ${POSTGRES_DB:-talentai}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: talentai_backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-talentai_user}:${POSTGRES_PASSWORD:-talentai_password}@postgres:5432/${POSTGRES_DB:-talentai}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-talentai}
      POSTGRES_USER: ${POSTGRES_USER:-talentai_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-talentai_password}
      
      # Application Configuration
      BASE_DIR: /app
      MODELS_DIR: /app/models
      DATA_DIR: /app/data
      LOGS_DIR: /app/logs
      
      # API Configuration
      API_V1_STR: /api/v1
      PROJECT_NAME: TalentAI
      VERSION: 1.0.0
      DESCRIPTION: "TalentAI - Academic Program Recommendation System"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
    volumes:
      - ./data:/app/data:ro
      - models_data:/app/models
      - logs_data:/app/logs
      - ./ml_models:/app/ml_models:ro
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - talentai_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (for caching - optional)
  redis:
    image: redis:7-alpine
    container_name: talentai_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - talentai_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  talentai_network:
    driver: bridge
    name: talentai_network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: talentai_postgres_data
  
  models_data:
    driver: local
    name: talentai_models_data
  
  logs_data:
    driver: local
    name: talentai_logs_data
  
  redis_data:
    driver: local
    name: talentai_redis_data